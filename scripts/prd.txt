# 概述  
本项目旨在将test目录中的SSE（Server-Sent Events）服务整合到现有的src/main.rs HTTP服务器中。这将使得wei-server能够通过http://localhost/sse路径提供SSE服务，同时保持现有的HTTP服务器功能不变。

# 核心功能  
- SSE服务集成：将test/main.rs中的SSE服务功能集成到现有的HTTP服务器中
- 工具注册与管理：整合test/tools.rs中定义的工具集到主服务中
- 依赖管理：确保所有必要的依赖项在项目构建中可用
- 路由整合：添加新的路由以访问SSE服务

# 用户体验  
- 用户将能够通过访问http://localhost/sse使用SSE服务
- 现有的HTTP服务功能将保持不变
- 所有在test/tools.rs中定义的工具将可通过新的SSE服务使用

# 技术架构  
- 系统组件：
  - 现有的HTTP服务器（src/main.rs和src/lib.rs）
  - 新的SSE服务组件（来自test/main.rs）
  - 工具定义和实现（来自test/tools.rs）
  - 路由系统扩展（src/routes/mod.rs）

- 数据模型：
  - 保持现有数据模型不变
  - 添加新的工具调用模型

- API和集成：
  - 添加新的/sse端点用于SSE连接
  - 确保正确注册和调用所有工具

- 基础设施需求：
  - 更新Cargo.toml以包含所有必要的依赖项
  - 确保正确配置tokio运行时

# 开发路线图  
- MVP需求：
  1. 将test/tools.rs中的工具定义导入到src代码库中
  2. 在src/routes/mod.rs中添加新的SSE路由
  3. 修改src/main.rs以在启动HTTP服务器的同时启动SSE服务
  4. 确保所有依赖项都正确配置

- 未来增强：
  1. 改进错误处理和日志记录
  2. 添加工具调用统计和监控
  3. 集成更多的工具和服务

# 逻辑依赖链
- 基础建设：
  1. 首先需要将test/tools.rs中的工具定义导入到src目录
  2. 然后更新依赖项以确保所有工具和服务都能正常工作
  3. 在路由系统中添加新的SSE路由

- 快速交付可用前端：
  1. 确保尽快提供可访问的SSE服务端点
  2. 保持现有HTTP服务的功能不变

- 特性规划和范围：
  1. 每个工具应该是原子性的，能够独立工作
  2. 新的SSE服务应该与现有服务和谐共存，不影响现有功能

# 风险和缓解  
- 技术挑战：
  1. 多个服务并行运行可能导致资源竞争
     - 缓解：使用tokio的多线程功能和适当的资源管理
  2. 依赖项版本冲突
     - 缓解：仔细审查并更新Cargo.toml中的依赖项

- MVP规划：
  1. 确保首先实现核心SSE功能
  2. 逐步添加和测试工具功能

- 资源约束：
  1. 服务器性能限制
     - 缓解：实施资源限制和监控

# 附录  
- 技术规范：
  1. Rust语言编写
  2. 使用axum作为HTTP服务器框架
  3. 使用mcp-core和rig-core提供工具和服务基础架构
  4. 使用tokio提供异步运行时支持 